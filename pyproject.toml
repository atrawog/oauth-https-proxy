[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-verification-tools"
version = "1.0.0"
description = "Comprehensive MCP (Model Context Protocol) endpoint compliance testing and validation"
readme = "README.md"
authors = [
    {name = "MCP Verification Tools Contributors"}
]
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = [
    "mcp",
    "model-context-protocol",
    "validation",
    "testing",
    "compliance",
    "llm",
    "ai"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Internet :: WWW/HTTP",
    "Operating System :: OS Independent",
]

dependencies = [
    # Core dependencies
    "httpx>=0.27.0",           # Async HTTP client
    "httpx-sse>=0.4.0",        # SSE support for httpx
    "pydantic>=2.0",           # Data validation
    "pyyaml>=6.0",             # YAML report generation
    "click>=8.0",              # CLI framework
    
    # Schema generation
    "datamodel-code-generator[http]>=0.25",  # Generate Pydantic from JSON schema
    "requests>=2.31",          # For downloading schemas
    
    # Optional but recommended
    "rich>=13.0",              # Beautiful terminal output
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0",
    "pytest-asyncio>=0.23",
    "pytest-cov>=4.0",
    "black>=24.0",
    "ruff>=0.1",
    "mypy>=1.0",
    "pre-commit>=3.0",
]

test = [
    "pytest>=8.0",
    "pytest-asyncio>=0.23",
    "pytest-cov>=4.0",
    "pytest-mock>=3.0",
]

docs = [
    "sphinx>=7.0",
    "sphinx-rtd-theme>=2.0",
    "sphinx-click>=5.0",
    "myst-parser>=2.0",
]

all = [
    "mcp-verification-tools[dev,test,docs]",
]

[project.urls]
Homepage = "https://github.com/your-org/mcp-verification-tools"
Documentation = "https://mcp-verification-tools.readthedocs.io"
Repository = "https://github.com/your-org/mcp-verification-tools"
Issues = "https://github.com/your-org/mcp-verification-tools/issues"
Specification = "https://modelcontextprotocol.io/specification"

[project.scripts]
mcp-verify = "mcp_verification_tools.cli:main"
mcp-generate-schema = "mcp_verification_tools.schemas.generate:main"

[tool.setuptools]
packages = ["mcp_verification_tools"]
include-package-data = true

[tool.setuptools.package-data]
mcp_verification_tools = [
    "schemas/*.json",
    "py.typed",
]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
addopts = [
    "--verbose",
    "--cov=mcp_verification_tools",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.black]
line-length = 100
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | mcp_verification_tools/models/generated
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # `zip()` without an explicit `strict=` parameter
]
exclude = [
    ".git",
    ".venv",
    "build",
    "dist",
    "mcp_verification_tools/models/generated",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/*" = ["B", "C4"]   # Allow test-specific patterns

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "httpx_sse.*",
    "datamodel_code_generator.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "mcp_verification_tools.models.generated.*"
ignore_errors = true  # Generated code may not be fully typed

[tool.coverage.run]
branch = true
source = ["mcp_verification_tools"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/models/generated/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]