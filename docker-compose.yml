services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    # SECURITY: Redis should NEVER be exposed to the internet!
    # ports:
    #   - "6379:6379"  # REMOVED - Only accessible within Docker network
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - proxy_network
    sysctls:
      - net.core.somaxconn=511

  api:
    build: .
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:9000:9000"  # Direct API access for local commands (no PROXY protocol) - localhost only
    environment:
      - REDIS_URL=${REDIS_URL}
      - HTTP_PORT=80
      - HTTPS_PORT=443
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app
      # OAuth environment variables
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - OAUTH_JWT_ALGORITHM=${OAUTH_JWT_ALGORITHM}
      - OAUTH_JWT_SECRET=${OAUTH_JWT_SECRET}
      - OAUTH_JWT_PRIVATE_KEY_B64=${OAUTH_JWT_PRIVATE_KEY_B64}
      - OAUTH_ACCESS_TOKEN_LIFETIME=${OAUTH_ACCESS_TOKEN_LIFETIME}
      - OAUTH_REFRESH_TOKEN_LIFETIME=${OAUTH_REFRESH_TOKEN_LIFETIME}
      - OAUTH_SESSION_TIMEOUT=${OAUTH_SESSION_TIMEOUT}
      - OAUTH_CLIENT_LIFETIME=${OAUTH_CLIENT_LIFETIME}
      - OAUTH_ALLOWED_GITHUB_USERS=${OAUTH_ALLOWED_GITHUB_USERS}
      - OAUTH_MCP_PROTOCOL_VERSION=${OAUTH_MCP_PROTOCOL_VERSION}
      # Docker management environment variables
      - DOCKER_API_VERSION=${DOCKER_API_VERSION:-1.41}
      - DOCKER_BUILDKIT=1
      # Test environment variables for internal access
      - TEST_BASE_URL_INTERNAL=http://localhost
      - RUNNING_IN_DOCKER=1
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      # Mount source code for development - allows hot-reloading
      - ./src:/app/src
      - ./run.py:/app/run.py
      - ./scripts:/app/scripts
      - ./tests:/app/tests
      # Docker service management volumes
      - ./dockerfiles:/app/dockerfiles
      - ./contexts:/app/contexts
      # Docker socket for container management
      - /var/run/docker.sock:/var/run/docker.sock
    # Add container to docker group for socket access
    # Note: The GID must match the docker group on the host
    group_add:
      - ${DOCKER_GID:-999}
    networks:
      - proxy_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  proxy_network:
    driver: bridge

volumes:
  redis_data: